#!/usr/bin/env perl

use FindBin;
# PERL5LIB
use lib "$FindBin::Bin/../lib";
use strict;
use warnings;

use Getopt::Long qw(:config posix_default no_ignore_case);
use Pod::Usage;
use File::Temp qw(tempfile);
use JSON::PP;
use KVMadm::Config;

my $opts = {};
my $kvmConfig;

sub editConfig {
    my $config = shift;
    my $configJSON = JSON::PP->new->pretty->encode($config);

    my ($fh, $filename) = tempfile();
    print $fh "$configJSON\n";
    close $fh;

    my $modified = (stat $filename)[9];

    my $editor = $ENV{VISUAL} || $ENV{EDITOR} || '/usr/bin/vi';
    system($editor, $filename) and die "ERROR: executing editor\n";

    open $fh, '<', $filename or die "ERROR: cannot open temp file $filename: $!\n";
    $configJSON = do { local $/; <$fh>; };
    close $fh;

    $modified = (stat $filename)[9] != $modified;
    unlink $filename;

    return ($modified, JSON::PP->new->decode($configJSON));
}

sub writeConfig {
    my $kvmName = shift;
    my $config = shift;

    my $configValid = 0;

    while (!$configValid){
        local $@;
        eval {
            local $SIG{__DIE__};
            (my $modified, $config) = editConfig($config);

            return if !$modified;

            $kvmConfig->writeConfig($kvmName, $config);
        };
        if ($@){
            print "$@\n";
            print "Do you want to retry [Y/n]? ";
            chomp(my $check = <STDIN>);

            $configValid = $check =~ /^no?$/i
        }
        else{
            $configValid = 1;
        }
    }
}

sub main {
    my $mainOpt = shift;
    defined $mainOpt or pod2usage(1);

    GetOptions($opts, qw(debug|d f=s)) or exit 1;
    $kvmConfig = KVMadm::Config->new(debug => $opts->{debug});

    for ($mainOpt){
        /^create$/ && do {
            my $kvmName;
            my $config;

            if ($opts->{f}){
                -f $opts->{f} or die 'ERROR: file ' . $opts->{f} . " does not exist\n";

                open my $fh, '<', $opts->{f} or die 'ERROR: open file ' . $opts->{f} . ":$!\n";
                my $configJSON = do { local $/; <$fh>; };
                close $fh;

                $config = JSON::PP->new->decode($configJSON);

                for my $kvm (keys %$config){
                    writeConfig($kvm, $config->{$kvm});
                }
            }
            else {
                $kvmName = shift @ARGV;
                defined $kvmName or pod2usage(1);
                $config = $kvmConfig->getTemplate;

                writeConfig($kvmName, $config);
            }
            
            last; 
        };
        /^edit$/ && do {
            my $kvmName = shift @ARGV;
            defined $kvmName or pod2usage(1);

            my $config = $kvmConfig->readConfig($kvmName);
            writeConfig($kvmName, $config);

            last;
        };
        /^delete$/ && do {
            my $kvmName = shift @ARGV;
            defined $kvmName or pod2usage(1);

            $kvmConfig->removeKVM($kvmName);
            last;
        };
        /^list$/ && do {
            my $kvmName = shift @ARGV;

            print JSON::PP->new->pretty->encode($kvmConfig->listKVM($kvmName));
            last;
        };
        /^man$/ && do {
            pod2usage(-exitstatus => 0, -verbose => 2);

            last;
        };
        /^help$/ && do {
            pod2usage(-exitval => 'NOEXIT');

            last;
        };
        #main argument invalid
        pod2usage(1);
    }
    return 1;
}

main(shift);

1;

__END__

=head1 NAME

kvmadm - Manage KVMs under SMF control

=head1 SYNOPSIS

B<kvmadm> I<command> [I<options...>]

where 'command' is one of the following:

    create [-f <filename>] <kvm_name>

    delete <kvm_name>

    edit <kvm_name>

    list [kvm_name]

    help

    man

=head1 DESCRIPTION

Use kvmadm to create/edit your KVMs under SMF control

=head2 B<create>

creates a KVM instance with the name B<kvm_name>. Create will open an editor
where the properties can be set. zvols and/or vnics which do not
exist will be created.

for the KVM instance the following properties can be set:

 mandatory
    vnc

 optional
     vcpus
     ram
     time_base
     boot_order
     hpet
     usb_tablet
     shutdown
     cleanup

for each disk the following properties can be set:

 mandatory
     model
     disk_path
     index 

 optional
     boot
     media
     disk_size
     cache

for each vnic the following properties can be set:

 mandatory
    model
    nic_tag
    index

 optional
    over
    txtimer
    txburst

for each serial the following properties can be set:

 mandatory
    serial_tag
    index

=head2 B<delete>

deletes the KVM instance with the name B<kvm_name>. Note: zvols and vnics will
B<not> be deleted.

=head2 B<edit>

modify the configuration of a KVM instance. See the descriptions in the B<create>
function for details.

=head2 B<list>

lists the available KVM instances with their properties. Lists details for B<kvm_name>
is given.

=head1 EXAMPLES

create a KVM instance with the name 'test-kvm'

    kvmadm create test-kvm

check the KVM instance properties

    kvmadm list test-kvm

list the available KVM instances

    svcs system/kvm

copy a KVM instance

    kvmadm list test-kvm > test-kvm.json

    kvmadm create -f test-kvm.json

=head1 COPYRIGHT

Copyright (c) 2014 by OETIKER+PARTNER AG. All rights reserved.

=head1 LICENSE

This program is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option)
any later version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see L<http://www.gnu.org/licenses/>.

=head1 AUTHOR

S<Tobias Oetiker E<lt>tobi@oetiker.chE<gt>>
S<Dominik Hassler E<lt>hadfl@cpan.orgE<gt>>

=head1 ACKNOWLEDGMENT

While the clever configuration options and other cool ideas have been shamelessly
stolen from Joyent's vmadm, the bugs and misfeatures are all exclusive to kvmadm.

=head1 HISTORY

2014-10-03 had Initial Version

=cut
